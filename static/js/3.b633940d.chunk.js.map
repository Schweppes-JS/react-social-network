{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","style","item","id","avatar","massage","likesCount","maxLength300","maxLengthCreator","ReduxPostForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","Button","MyPosts","React","memo","postsElement","posts","map","post","key","message","styles","postsBlock","value","addPost","MyPostsContainer","connect","state","profilePage","newPostText","dispatch","newPost","addPostActionCreator","ReduxProfileDataForm","profile","error","infoBlock","formStyles","formSummaryError","createField","Input","type","contactsBlock","Object","keys","contacts","contact","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","contacTitle","contactValue","aboutMe","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","alt","profilePhoto","target","files","length","formData","then","initialValues","Profile","ProfileContainer","refreshProfile","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","this","prevProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.b633940d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__18G08\",\"profileImage\":\"ProfileInfo_profileImage__rr5o8\",\"profilePhoto\":\"ProfileInfo_profilePhoto__2haaf\",\"infoBlock\":\"ProfileInfo_infoBlock__2l0va\",\"contact\":\"ProfileInfo_contact__ozi4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__4BxUn\",\"posts\":\"MyPosts_posts__3q4MU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ZwIwL\",\"avatar\":\"Post_avatar__REdm0\"};","import React from 'react';\r\nimport style from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <i id={style.avatar} className=\"fas fa-user-astronaut\"></i>\r\n            {props.massage}\r\n            <div>\r\n                <span>like{props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react';\r\nimport styles from './MyPosts.module.css';\r\nimport Post from './Post/Post.jsx';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/required';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport Button from '../../common/Button/Button';\r\n\r\n\r\nconst maxLength300 = maxLengthCreator(300);\r\n\r\nconst PostFrom = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"post\"\r\n                    component={Textarea}\r\n                    validate={[required, maxLength300]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button>Add post</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ReduxPostForm = reduxForm({\r\n    form: 'post'\r\n})(PostFrom);\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let postsElement = props.posts.map(post => <Post key={post.id} massage={post.message} likesCount={post.likesCount} />);\r\n\r\n    const createNewPost = (value) => {\r\n        props.addPost(value.post);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <ReduxPostForm onSubmit={createNewPost} />\r\n            <div className={styles.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\n","import MyPosts from './MyPosts.jsx';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPost) => {\r\n            dispatch(addPostActionCreator(newPost));\r\n        }\r\n    };\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport formStyles from '../../common/FormsControls/FormsControls.module.css';\r\nimport { reduxForm } from 'redux-form';\r\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form className={style.infoBlock} onSubmit={handleSubmit}>\r\n      <button>Save</button>\r\n      {error && <div className={formStyles.formSummaryError}>{error}</div>}\r\n      <span><b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}</span>\r\n      <span><b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}</span>\r\n      <span><b>My professional skills</b>: {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}</span>\r\n      <div className={style.contactsBlock}><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <div key={key} className={style.contact}>\r\n          <b>{key}:{createField(key, \"contacts.\" + key, [], Input)}</b>\r\n        </div>\r\n      })}</div>\r\n      <span><b>About me</b>:{createField(\"About Me\", \"aboutMe\", [], Textarea)}</span>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ReduxProfileDataForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ReduxProfileDataForm;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nconst ProfileStatus = props => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactiveteEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode && <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>}\r\n\r\n            {editMode && <input onChange={onStatusChange} onBlur={deactiveteEditMode} autoFocus={true} value={status} />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React, { useState } from 'react';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport style from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport userPhoto from '../../../assets/user.png';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />;\r\n    }\r\n\r\n    const onPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.descriptionBlock}>\r\n                <img\r\n                    src={profile.photos.large || userPhoto}\r\n                    alt=\"user avatar\"\r\n                    className={style.profilePhoto}\r\n                />\r\n                {isOwner && <input type=\"file\" onChange={onPhotoSelected} />}\r\n\r\n                {editMode ? <ProfileDataForm onSubmit={onSubmit} initialValues={profile} profile={profile} /> : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)} />}\r\n                <p><b>Status</b>: <ProfileStatus status={status} updateStatus={updateStatus} /></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div className={style.infoBlock}>\r\n            {isOwner && <button onClick={goToEditMode}>Edit</button>}\r\n            <p><b>Full name</b>: {profile.fullName}</p>\r\n            <p><b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n            {profile.lookingForAJob && <p><b>My professional skills</b>: {profile.lookingForAJobDescription}</p>}\r\n            <div className={style.contactsBlock}><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return < Contact key={key} contacTitle={key} contactValue={profile.contacts[key]} />\r\n            })}</div>\r\n            <p><b>About me</b>: {profile.aboutMe}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Contact = ({ contacTitle, contactValue }) => {\r\n    return <p className={style.contact}>{contacTitle}: <i>{contactValue}</i></p>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus} saveProfile={props.saveProfile} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React, { Component } from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nexport class ProfileContainer extends Component {\r\n\r\n  refreshProfile = () => {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <Profile {...this.props} isOwner={!this.props.match.params.userId} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.id,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}